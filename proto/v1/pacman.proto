syntax = "proto3";
package proto.v1;

option go_package = "gen/go/pb";

// Service containing method for adding aur packages
service PacmanService {
  // Add new packages from AUR package registry
  rpc Add(AddRequest) returns (AddResponse);

  // Update all packages from AUR
  rpc Update(UpdateRequest) returns (UpdateResponse);

  // Check wether some package exists in repository
  rpc Search(SearchRequest) returns (SearchResponse);

  // Get package description from pacman
  rpc Describe(DescribeRequest) returns (DescribeResponse);

  // Get overall statistics from service
  rpc Stats(StatsRequest) returns (StatsResponse);

  // Login and recieve token for other communications
  rpc Login(LoginRequest) returns (LoginResponse);

  // A call used to check wether token is up to date in current session
  rpc CheckToken(CheckTokenRequest) returns (CheckTokenResponse);
}

// List of packages from AUR to add
message AddRequest {
  repeated string packages = 1;
  string token = 2;
}

message AddResponse {}

// Search pattern that will be used in search text field
message SearchRequest {
  string pattern = 1;
}

// List of package names
message SearchResponse {
  repeated string packages = 1;
}

message UpdateRequest {
  string token = 1;
}

message UpdateResponse {}

message DescribeRequest {
  string package = 1;
}

message DescribeResponse {
  map<string, string> fields = 1;
}

message StatsRequest {}

message StatsResponse {
  // Overall count of installed packages
  int32 packages_count = 1;
  // Count of outdated packages, that needs upgrade (can be shown in chart)
  int32 outdated_count = 2;
  // List of packages that require update
  repeated OutdatedPackage outdated_packages = 3;
}

message OutdatedPackage {
  string name = 1;
  string current_version = 2;
  string latest_version = 3;
}

message LoginRequest {
  string login = 1;
  string password = 2;
}

message LoginResponse {
  string token = 1;
}

message CheckTokenRequest {
  string token = 1;
}

message CheckTokenResponse {
  bool up_to_date = 1;
}
